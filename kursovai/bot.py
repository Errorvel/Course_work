import logging
import asyncio
from datetime import datetime, timedelta
import csv
import matplotlib.pyplot as plt
from io import BytesIO, StringIO

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BufferedInputFile
)

from config import API_TOKEN, POLLING_TIMEOUT, PIE_CHART_DPI, CATEGORIES, get_main_kb
from db import add_task, finish_task, fetch_tasks


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


active_tasks: dict[int, list[tuple[int, str]]] = {}


async def make_pie_file(data: list[tuple[str, int]]) -> BufferedInputFile:

    fig, ax = plt.subplots(dpi=PIE_CHART_DPI)
    labels, sizes = zip(*data) if data else ([], [])
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')

    buf = BytesIO()
    plt.savefig(buf, format="png")
    plt.close(fig)
    buf.seek(0)
    return BufferedInputFile(buf.read(), filename="chart.png")


@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=get_main_kb()
    )


@dp.message(F.text == "üéØ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É")
async def start_task(m: Message):
    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"start|{cat}")]
        for cat in CATEGORIES
    ])
    await m.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=ikb)


@dp.callback_query(F.data.startswith("start|"))
async def on_category_selected(cb: CallbackQuery):
    user_id = cb.from_user.id
    user_name = cb.from_user.full_name or ""
    category = cb.data.split("|", 1)[1]
    start_iso = datetime.now().isoformat()

    task_id = add_task(user_id, user_name, category, start_iso)
    active_tasks.setdefault(user_id, []).append((task_id, category))

    await cb.answer()
    await bot.send_message(
        user_id,
        f"–ó–∞–¥–∞—á–∞ <b>{category}</b> –Ω–∞—á–∞—Ç–∞ –≤ <i>{start_iso[11:19]}</i>"
    )

    rem_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{mins} –º–∏–Ω", callback_data=f"remind|{task_id}|{mins}")]
        for mins in (15, 30, 60)
    ])
    await bot.send_message(user_id, "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ?", reply_markup=rem_kb)


@dp.callback_query(F.data.startswith("remind|"))
async def on_remind_set(cb: CallbackQuery):
    _, task_id_str, minutes_str = cb.data.split("|")
    user_id = cb.from_user.id
    minutes = int(minutes_str)

    await cb.answer()
    await bot.send_message(user_id, f"–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")
    asyncio.create_task(reminder(user_id, int(task_id_str), minutes))


async def reminder(user_id: int, task_id: int, minutes: int):
    await asyncio.sleep(minutes * 60)
    tasks = active_tasks.get(user_id, [])
    for tid, cat in tasks:
        if tid == task_id:
            await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ <b>{cat}</b>.")
            return


@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
async def end_task(m: Message):
    user_id = m.from_user.id
    tasks = active_tasks.get(user_id)

    if not tasks:
        return await m.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=get_main_kb())

    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{cat} #{tid}", callback_data=f"end|{tid}")]
        for (tid, cat) in tasks
    ])
    await m.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=ikb)


@dp.callback_query(F.data.startswith("end|"))
async def end_task_choice(cb: CallbackQuery):
    user_id = cb.from_user.id
    task_id = int(cb.data.split("|")[1])
    end_iso = datetime.now().isoformat()

    duration = finish_task(task_id, end_iso)

    tasks = active_tasks.get(user_id, [])
    active_tasks[user_id] = [t for t in tasks if t[0] != task_id]
    if not active_tasks[user_id]:
        active_tasks.pop(user_id)

    await cb.answer()
    await cb.message.answer(
        f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration} –º–∏–Ω—É—Ç</b>",
        reply_markup=get_main_kb()
    )


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_menu(m: Message):
    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –î–µ–Ω—å", callback_data="stats|daily"),
            InlineKeyboardButton(text="üóì –ù–µ–¥–µ–ª—è", callback_data="stats|weekly"),
            InlineKeyboardButton(text="üìÜ –ú–µ—Å—è—Ü", callback_data="stats|monthly")
        ]
    ])
    await m.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=ikb)


@dp.callback_query(F.data.startswith("stats|"))
async def stats_callback(cb: CallbackQuery):
    period = cb.data.split("|")[1]
    now = datetime.now()

    if period == "daily":
        since = now - timedelta(days=1)
    elif period == "weekly":
        since = now - timedelta(days=7)
    else:
        since = now - timedelta(days=30)

    rows = fetch_tasks(cb.from_user.id, since.isoformat())
    agg = {cat: sum(dur or 0 for c, dur, *_ in rows if c == cat) for cat in CATEGORIES}
    data = [(cat, agg[cat]) for cat in CATEGORIES if agg.get(cat)]

    if data:
        chart = await make_pie_file(data)
        await cb.message.answer_photo(photo=chart)
    else:
        await cb.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")

    await cb.answer()


@dp.message(F.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def recommendations(m: Message):
    week_ago = (datetime.now() - timedelta(days=7)).isoformat()
    rows = fetch_tasks(m.from_user.id, week_ago)

    if not rows:
        return await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ù–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–µ–µ!")

    totals = {}
    for cat, dur, *_ in rows:
        totals[cat] = totals.get(cat, 0) + (dur or 0)

    if not totals:
        return await m.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    max_cat = max(totals, key=totals.get)
    min_cat = min(totals, key=totals.get)

    msg = (
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>:\n"
        f"üî∏ –¢—ã –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—à—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{max_cat}</b> ({totals[max_cat]} –º–∏–Ω).\n"
        f"üî∏ –ú–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã —É–¥–µ–ª—è–µ—à—å: <b>{min_cat}</b> ({totals[min_cat]} –º–∏–Ω).\n"
    )
    if min_cat in ["–û—Ç–¥—ã—Ö", "–£—á—ë–±–∞"]:
        msg += f"‚úÖ –°–æ–≤–µ—Ç: –ø–æ–ø—Ä–æ–±—É–π —É–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{min_cat}</b> –¥–ª—è –±–∞–ª–∞–Ω—Å–∞!"
    else:
        msg += f"‚úÖ –°–æ–≤–µ—Ç: –ø–æ–¥—É–º–∞–π, —Å—Ç–æ–∏—Ç –ª–∏ —É–¥–µ–ª—è—Ç—å —Å—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{max_cat}</b>."

    await m.answer(msg, reply_markup=get_main_kb())


@dp.message(Command("export"))
async def export_data(m: Message):
    rows = fetch_tasks(m.from_user.id, "1970-01-01T00:00:00")
    data = [["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞—á–∞–ª–æ", "–ö–æ–Ω–µ—Ü", "–ú–∏–Ω—É—Ç—ã"]]

    for cat, dur, start, end in rows:
        data.append([cat, start, end or "", str(dur or 0)])

    buf = StringIO()
    csv.writer(buf).writerows(data)
    bom = ("\ufeff" + buf.getvalue()).encode('utf-8')

    await m.answer_document(document=BufferedInputFile(bom, filename="export.csv"))


async def main():
    await dp.start_polling(bot, timeout=POLLING_TIMEOUT)


if __name__ == "__main__":
    asyncio.run(main())
